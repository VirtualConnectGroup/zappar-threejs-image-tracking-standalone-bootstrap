"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const elementFactory_1 = require("./elementFactory");
const profile_1 = require("./profile");
const profile = new profile_1.default();
class SnapshotManager extends elementFactory_1.default {
    constructor() {
        super(...arguments);
        this.containerPreview = SnapshotManager._getContainerPreview();
        this.containerButtons = SnapshotManager._getContainerFlex();
        this.instructionsText = SnapshotManager._getInstructionsP();
    }
    captureimage(captureParameters, localisation) {
        if (SnapshotManager._dialogOpen) {
            throw new Error('Snapshot Dialog is already open.');
        }
        if (captureParameters.data.includes('video/mp4')) {
            this.shareVideo(captureParameters, localisation);
            return;
        }
        SnapshotManager._dialogOpen = true;
        document.body.append(this.containerPreview);
        this.containerPreview.appendChild(SnapshotManager._getSvgClose(() => {
            var _a;
            (_a = captureParameters.onClose) === null || _a === void 0 ? void 0 : _a.call(captureParameters);
            this.destroy();
        }));
        const previewimage = SnapshotManager._getPreviewImage(captureParameters.data);
        this.containerButtons.appendChild(this.instructionsText);
        SnapshotManager._dataURItoFileBlob(captureParameters.data, '.jpeg').then((file) => {
            if (captureParameters.hideShareButton)
                return;
            const buttonShare = SnapshotManager._prepareShare(file, 'jpeg', captureParameters.shareUrl, captureParameters.shareTitle, captureParameters.shareText, localisation.SHARE);
            buttonShare === null || buttonShare === void 0 ? void 0 : buttonShare.addEventListener('click', () => { var _a; (_a = captureParameters.onShare) === null || _a === void 0 ? void 0 : _a.call(captureParameters); });
            if (!profile.iOSFilesAppForPhotoShare && buttonShare && !captureParameters.hideShareButton) {
                this.containerButtons.appendChild(buttonShare);
            }
        });
        if (profile.longPressForImageShare) {
            this._displayMessage(localisation.TapAndHoldToSave);
        }
        else {
            previewimage.style.pointerEvents = 'none';
        }
        this.containerPreview.appendChild(this.containerButtons);
        if (!profile.iOS12HideSave) {
            const buttonSave = SnapshotManager._getButtonSave(captureParameters.data, SnapshotManager._getFileName('jpeg', captureParameters.fileNamePrepend), localisation.SAVE);
            this.containerButtons.appendChild(buttonSave);
            if (profile.iOSFilesAppForPhotoShare) {
                buttonSave.addEventListener('click', () => {
                    var _a;
                    (_a = captureParameters.onSave) === null || _a === void 0 ? void 0 : _a.call(captureParameters);
                    if (!captureParameters.hideShareButton) {
                        this._displayMessage(localisation.NowOpenFilesAppToShare);
                        buttonSave.remove();
                        this.containerButtons.appendChild(SnapshotManager._getOpenFilesButton());
                    }
                });
            }
            else {
                buttonSave.addEventListener('click', () => {
                    var _a;
                    (_a = captureParameters.onSave) === null || _a === void 0 ? void 0 : _a.call(captureParameters);
                });
            }
        }
    }
    _displayMessage(text) {
        this.instructionsText.innerHTML = text;
        this.instructionsText.style.display = 'block';
    }
    static _dataURItoBlob(dataURI) {
        return fetch(dataURI).then((res) => res.blob());
    }
    shareVideo(captureParameters, localisation) {
        if (SnapshotManager._dialogOpen) {
            throw new Error('Snapshot Dialog is already open.');
        }
        SnapshotManager._dialogOpen = true;
        document.body.append(this.containerPreview);
        this.containerPreview.appendChild(SnapshotManager._getSvgClose(() => {
            var _a;
            (_a = captureParameters.onClose) === null || _a === void 0 ? void 0 : _a.call(captureParameters);
            this.destroy();
        }));
        SnapshotManager._getPreviewVideo(captureParameters.data);
        this.containerButtons.appendChild(this.instructionsText);
        SnapshotManager._dataURItoFileBlob(captureParameters.data, '.mp4').then((file) => {
            if (captureParameters.hideShareButton)
                return;
            const buttonShare = SnapshotManager._prepareShare(file, 'mp4', captureParameters.shareUrl, captureParameters.shareTitle, captureParameters.shareText, localisation.SHARE);
            buttonShare === null || buttonShare === void 0 ? void 0 : buttonShare.addEventListener('click', () => { var _a; (_a = captureParameters.onShare) === null || _a === void 0 ? void 0 : _a.call(captureParameters); });
            if (!profile.iOSFilesAppForPhotoShare && buttonShare && !captureParameters.hideShareButton) {
                this.containerButtons.appendChild(buttonShare);
            }
        });
        const buttonSave = SnapshotManager._getButtonSave(captureParameters.data, SnapshotManager._getFileName('mp4', captureParameters.fileNamePrepend), localisation.SAVE);
        this.containerButtons.appendChild(buttonSave);
        this.containerPreview.appendChild(this.containerButtons);
        if (profile.iOSFilesAppForPhotoShare) {
            buttonSave.addEventListener('click', () => {
                var _a;
                (_a = captureParameters.onSave) === null || _a === void 0 ? void 0 : _a.call(captureParameters);
                if (!captureParameters.hideShareButton) {
                    this._displayMessage(localisation.NowOpenFilesAppToShare);
                    buttonSave.remove();
                    this.containerButtons.appendChild(SnapshotManager._getOpenFilesButton());
                }
            });
        }
        else {
            buttonSave.addEventListener('click', () => {
                var _a;
                (_a = captureParameters.onSave) === null || _a === void 0 ? void 0 : _a.call(captureParameters);
            });
        }
    }
    static _prepareShare(file, fileType, shareUrl = '', shareTitle = '', shareText = '', shareButtonText) {
        if (!navigator.canShare)
            return undefined;
        if (!navigator.canShare({ files: [file] }))
            return undefined;
        const buttonShare = SnapshotManager._getShareButton(shareButtonText);
        buttonShare.addEventListener('click', async () => {
            try {
                const shareData = { files: [file] };
                if (!profile.imageOnlyInShareData) {
                    shareData.url = shareUrl;
                    shareData.title = shareTitle;
                    shareData.text = shareText;
                }
                await navigator.share(shareData);
            }
            catch (e) {
                console.log('Unable to share', e.message);
            }
        });
        return buttonShare;
    }
    destroy() {
        const baseContainer = document.getElementById('ZapparSnapshotContainer');
        baseContainer === null || baseContainer === void 0 ? void 0 : baseContainer.querySelectorAll('*').forEach((n) => n.remove());
        document.body.removeChild(baseContainer);
        this.instructionsText.style.display = 'none';
        SnapshotManager._dialogOpen = false;
    }
    static _getFileName(fileType, prepend = 'Zappar') {
        return `${prepend}_saved_media_${new Date().toLocaleTimeString()}.${fileType}`;
    }
    static async _dataURItoFileBlob(dataURI, fileType) {
        const blob = await fetch(dataURI).then((res) => res.blob());
        const file = new File([blob], `${SnapshotManager._getFileName(fileType)}`, { type: blob.type });
        return file;
    }
}
exports.default = SnapshotManager;
SnapshotManager._dialogOpen = false;
//# sourceMappingURL=snapshot.js.map